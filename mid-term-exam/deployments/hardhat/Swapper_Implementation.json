{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_fromAddres",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_toAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_exchangeRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_exchangeFee",
          "type": "uint256"
        }
      ],
      "name": "ExchangeRateAndFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_fromAddres",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_toAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_toToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RequestCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestRejected",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "approveRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "cancelRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_toAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "createRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_toToken",
          "type": "address"
        }
      ],
      "name": "getExchangeFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "exchangeFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_toToken",
          "type": "address"
        }
      ],
      "name": "getExchangeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "exchangeRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTreasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "rejectRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_exchangeRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_exchangeFee",
          "type": "uint256"
        }
      ],
      "name": "setExchangeRateAndFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1b87c94d6a34af97656e08461b3c6f7d96e04d67ed5c8348f41f6127c01f72e2",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1906426",
    "logsBloom": "0x
    "blockHash": "0x763f398fcf1ccef171753e629c12261473649e6d4802171d18952ba8f5019d5f",
    "transactionHash": "0x1b87c94d6a34af97656e08461b3c6f7d96e04d67ed5c8348f41f6127c01f72e2",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1906426",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3aa2f31fb9c4c39cdc0813ffc840a08b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_fromAddres\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_exchangeRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_exchangeFee\",\"type\":\"uint256\"}],\"name\":\"ExchangeRateAndFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"RequestApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"RequestCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_fromAddres\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RequestCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"RequestRejected\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"approveRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"cancelRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"}],\"name\":\"getExchangeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"exchangeFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"}],\"name\":\"getExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"exchangeRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"rejectRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_exchangeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_exchangeFee\",\"type\":\"uint256\"}],\"name\":\"setExchangeRateAndFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Swapper.sol\":\"Swapper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/Swapper.sol\":{\"content\":\"pragma solidity ^0.8.24;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\r\\n\\r\\ncontract Swapper is OwnableUpgradeable, ReentrancyGuardUpgradeable {\\r\\n  struct Request {\\r\\n    address fromAddress;\\r\\n    address toAddress;\\r\\n    address fromToken;\\r\\n    address toToken;\\r\\n    uint fromReceive;\\r\\n    uint toReceive;\\r\\n    Status status;\\r\\n    // uint amount;\\r\\n  }\\r\\n  enum Status {\\r\\n    CREATED,\\r\\n    APPROVED,\\r\\n    REJECTED,\\r\\n    CANCELLED\\r\\n  }\\r\\n\\r\\n  address private treasury;\\r\\n  uint private requestCount;\\r\\n  mapping (uint => Request) private requests;\\r\\n  mapping (uint => uint) private exchangeRates;\\r\\n  mapping (uint => uint) private exchangeFees;\\r\\n  uint256 public constant DECIMALS = 8;\\r\\n\\r\\n\\r\\n  event ExchangeRateAndFee(address _fromAddres, address _toAddress, uint _exchangeRate, uint _exchangeFee);\\r\\n  event RequestCreated(uint _requestId, address _fromAddres, address _toAddress, address _fromToken, address _toToken, uint amount);\\r\\n  event RequestCancelled(uint _requestId);\\r\\n  event RequestApproved(uint _requestId);\\r\\n  event RequestRejected(uint _requestId);\\r\\n\\r\\n  function initialize(address _owner, address _treasury) public initializer {\\r\\n    require(_owner != address(0) && _treasury != address(0), \\\"Params wrong\\\");\\r\\n    treasury = _treasury;\\r\\n  }\\r\\n\\r\\n  function getTreasury() external view returns(address) {\\r\\n    return treasury;\\r\\n  }\\r\\n\\r\\n  function getTokenHash(address _fromToken, address _toToken) internal pure returns (uint tokenHash) {\\r\\n    tokenHash = uint(keccak256(abi.encodePacked(_fromToken, _toToken)));\\r\\n  }\\r\\n\\r\\n  function getExchangeRate(address _fromToken, address _toToken) public view returns (uint exchangeRate) {\\r\\n    uint tokenHash = getTokenHash(_fromToken, _toToken);\\r\\n    exchangeRate = exchangeRates[tokenHash];\\r\\n  }\\r\\n\\r\\n  function calculateTransferAmount(address _fromToken, address _toToken, uint amount) internal view returns (uint fromReceive, uint toReceive) {\\r\\n    ERC20 fromToken = ERC20(_fromToken);\\r\\n    ERC20 toToken = ERC20(_toToken);\\r\\n\\r\\n    uint fromDecimal = fromToken.decimals();\\r\\n    uint toDecimal = toToken.decimals();\\r\\n    uint exchangeRate = getExchangeRate(_fromToken, _toToken);\\r\\n\\r\\n    fromReceive = amount * exchangeRate / 10 ** (DECIMALS + toDecimal - fromDecimal);\\r\\n    toReceive = amount;\\r\\n  }\\r\\n\\r\\n  function getExchangeFee(address _fromToken, address _toToken) public view returns (uint exchangeFee) {\\r\\n    uint tokenHash = getTokenHash(_fromToken, _toToken);\\r\\n    exchangeFee = exchangeFees[tokenHash];\\r\\n  }\\r\\n\\r\\n  function setExchangeRateAndFee(address _fromToken, address _toToken, uint _exchangeRate, uint _exchangeFee) external onlyOwner {\\r\\n    require(_exchangeRate != 0, \\\"\\\");\\r\\n    uint tokenHash = getTokenHash(_fromToken, _toToken);\\r\\n\\r\\n    exchangeRates[tokenHash] = _exchangeRate;\\r\\n    exchangeFees[tokenHash] = _exchangeFee;\\r\\n\\r\\n    emit ExchangeRateAndFee(_fromToken, _toToken, _exchangeRate, _exchangeFee);\\r\\n  }\\r\\n\\r\\n  function createRequest(address _toAddress, address _fromToken, address _toToken, uint _amount) external nonReentrant {\\r\\n    require(getExchangeRate(_fromToken, _toToken) != 0, \\\"Token not support\\\");\\r\\n\\r\\n    ERC20 fromToken = ERC20(_fromToken);\\r\\n    fromToken.transferFrom(msg.sender, address(this), _amount);\\r\\n    requestCount++;\\r\\n    (uint fromReceive, uint toReceive) = calculateTransferAmount(_fromToken, _toToken, _amount);\\r\\n    requests[requestCount] = Request(msg.sender, _toAddress, _fromToken, _toToken, fromReceive, toReceive, Status.CREATED);\\r\\n\\r\\n    emit RequestCreated(requestCount, msg.sender, _toAddress, _fromToken, _toToken, _amount);\\r\\n\\r\\n  }\\r\\n\\r\\n  function cancelRequest(uint _requestId) external nonReentrant {\\r\\n    Request storage request = requests[_requestId];\\r\\n    require(request.fromAddress == msg.sender && request.status == Status.CREATED, \\\"Must be creator\\\");\\r\\n\\r\\n    request.status = Status.CANCELLED;\\r\\n    ERC20 fromToken = ERC20(request.fromToken);\\r\\n    fromToken.transferFrom(address(this), request.fromAddress, request.toReceive);\\r\\n\\r\\n    emit RequestCancelled(_requestId);\\r\\n  }\\r\\n\\r\\n  function approveRequest(uint _requestId) external nonReentrant {\\r\\n    Request storage request = requests[_requestId];\\r\\n    require(request.status == Status.CREATED && msg.sender == request.toAddress, \\\"Cannot approve\\\");\\r\\n\\r\\n    ERC20 fromToken = ERC20(request.fromToken);\\r\\n    ERC20 toToken = ERC20(request.toToken);\\r\\n    uint exchangeFee = getExchangeFee(request.fromToken, request.toToken);\\r\\n    // (uint fromReceive, uint toReceive) = calculateTransferAmount(request.fromToken, request.toToken, request.amount);\\r\\n    uint fromReceiveFee = request.fromReceive * exchangeFee / 10 ** (DECIMALS + 2);\\r\\n    uint toReceiveFee = request.toReceive * exchangeFee / 10 ** (DECIMALS + 2);\\r\\n\\r\\n    fromToken.transferFrom(address(this), request.toAddress, request.toReceive - toReceiveFee);\\r\\n    toToken.transferFrom(request.toAddress, address(this), fromReceiveFee);\\r\\n    toToken.transferFrom(request.toAddress, request.fromAddress, request.fromReceive - fromReceiveFee);\\r\\n    request.status = Status.APPROVED;\\r\\n\\r\\n    emit RequestApproved(_requestId);\\r\\n  }\\r\\n\\r\\n  function rejectRequest(uint _requestId) external nonReentrant {\\r\\n    Request storage request = requests[_requestId];\\r\\n    require(request.toAddress == msg.sender && request.status == Status.CREATED, \\\"Must be creator\\\");\\r\\n\\r\\n    request.status = Status.REJECTED;\\r\\n    ERC20 fromToken = ERC20(request.fromToken);\\r\\n    fromToken.transferFrom(address(this), request.fromAddress, request.toReceive);\\r\\n\\r\\n    emit RequestRejected(_requestId);\\r\\n  }\\r\\n}\",\"keccak256\":\"0xa5f3fd9a5119e07b087b26a0481047d69d29c67867047dd8c97f0578072fc579\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506121a0806100206000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063485cc9551161008c578063baaa61be11610066578063baaa61be146101d8578063d7d1bbdb14610208578063ed71262a14610224578063f2fde38b14610240576100cf565b8063485cc95514610194578063715018a6146101b05780638da5cb5b146101ba576100cf565b806302cd5bef146100d45780632b5d97a2146101045780632d7788db146101205780632e0f26251461013c5780633015394c1461015a5780633b19e84a14610176575b600080fd5b6100ee60048036038101906100e991906117b3565b61025c565b6040516100fb919061180c565b60405180910390f35b61011e60048036038101906101199190611853565b610288565b005b61013a600480360381019061013591906118ba565b610355565b005b61014461058a565b604051610151919061180c565b60405180910390f35b610174600480360381019061016f91906118ba565b61058f565b005b61017e6107c4565b60405161018b91906118f6565b60405180910390f35b6101ae60048036038101906101a991906117b3565b6107ed565b005b6101b8610a5d565b005b6101c2610a71565b6040516101cf91906118f6565b60405180910390f35b6101f260048036038101906101ed91906117b3565b610aa9565b6040516101ff919061180c565b60405180910390f35b610222600480360381019061021d91906118ba565b610ad5565b005b61023e60048036038101906102399190611911565b610f85565b005b61025a60048036038101906102559190611978565b6112f3565b005b6000806102698484611379565b9050600460008281526020019081526020016000205491505092915050565b6102906113af565b600082036102d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ca906119dc565b60405180910390fd5b60006102df8585611379565b90508260036000838152602001908152602001600020819055508160046000838152602001908152602001600020819055507faadb66a62dcb0cfd19fd29bbabd96cdbf736d61afa8691cd09a6a3764507aed38585858560405161034694939291906119fc565b60405180910390a15050505050565b61035d611436565b60006002600083815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480156104085750600060038111156103e2576103e1611a41565b5b8160060160009054906101000a900460ff16600381111561040657610405611a41565b5b145b610447576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043e90611abc565b60405180910390fd5b60028160060160006101000a81548160ff0219169083600381111561046f5761046e611a41565b5b021790555060008160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166323b872dd308460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685600501546040518463ffffffff1660e01b815260040161050293929190611adc565b6020604051808303816000875af1158015610521573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105459190611b4b565b507f1fdac08e93f72ff55b24ebdf4152b7f56b98982fe9249639c1010cc52aebccd683604051610575919061180c565b60405180910390a1505061058761148d565b50565b600881565b610597611436565b60006002600083815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614801561064257506000600381111561061c5761061b611a41565b5b8160060160009054906101000a900460ff1660038111156106405761063f611a41565b5b145b610681576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067890611abc565b60405180910390fd5b60038160060160006101000a81548160ff021916908360038111156106a9576106a8611a41565b5b021790555060008160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166323b872dd308460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685600501546040518463ffffffff1660e01b815260040161073c93929190611adc565b6020604051808303816000875af115801561075b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077f9190611b4b565b507fee243f878b7fc2f54e934ca33783d4395d42bc07612e2bd4b8e0e178639f7a28836040516107af919061180c565b60405180910390a150506107c161148d565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006107f76114a6565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff161480156108455750825b9050600060018367ffffffffffffffff1614801561087a575060003073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015610888575080155b156108bf576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550831561090f5760018560000160086101000a81548160ff0219169083151502179055505b600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16141580156109795750600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614155b6109b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109af90611bc4565b60405180910390fd5b856000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508315610a545760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d26001604051610a4b9190611c3d565b60405180910390a15b50505050505050565b610a656113af565b610a6f60006114ce565b565b600080610a7c6115a5565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b600080610ab68484611379565b9050600360008281526020019081526020016000205491505092915050565b610add611436565b600060026000838152602001908152602001600020905060006003811115610b0857610b07611a41565b5b8160060160009054906101000a900460ff166003811115610b2c57610b2b611a41565b5b148015610b8857508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610bc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bbe90611ca4565b60405180910390fd5b60008160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000610c6d8460020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168560030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661025c565b9050600060026008610c7f9190611cf3565b600a610c8b9190611e5a565b828660040154610c9b9190611ea5565b610ca59190611f16565b9050600060026008610cb79190611cf3565b600a610cc39190611e5a565b838760050154610cd39190611ea5565b610cdd9190611f16565b90508473ffffffffffffffffffffffffffffffffffffffff166323b872dd308860010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16848a60050154610d319190611f47565b6040518463ffffffff1660e01b8152600401610d4f93929190611adc565b6020604051808303816000875af1158015610d6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d929190611b4b565b508373ffffffffffffffffffffffffffffffffffffffff166323b872dd8760010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1630856040518463ffffffff1660e01b8152600401610df493929190611adc565b6020604051808303816000875af1158015610e13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e379190611b4b565b508373ffffffffffffffffffffffffffffffffffffffff166323b872dd8760010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168860000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16858a60040154610eae9190611f47565b6040518463ffffffff1660e01b8152600401610ecc93929190611adc565b6020604051808303816000875af1158015610eeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0f9190611b4b565b5060018660060160006101000a81548160ff02191690836003811115610f3857610f37611a41565b5b02179055507fbecbbd7543b68baaaf7e9c3fd12e4719f1f506f4253abef4a6573d0adf3a73ed87604051610f6c919061180c565b60405180910390a1505050505050610f8261148d565b50565b610f8d611436565b6000610f998484610aa9565b03610fd9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd090611fc7565b60405180910390fd5b60008390508073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161101b93929190611adc565b6020604051808303816000875af115801561103a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105e9190611b4b565b506001600081548092919061107290611fe7565b91905055506000806110858686866115cd565b915091506040518060e001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020016000600381111561112457611123611a41565b5b81525060026000600154815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080820151816004015560a0820151816005015560c08201518160060160006101000a81548160ff0219169083600381111561129757611296611a41565b5b02179055509050507f0a40f07db67efcca64019d6cd2ef89bf3a05e93d3c418cc2fc489d90d15394a260015433898989896040516112da9695949392919061202f565b60405180910390a15050506112ed61148d565b50505050565b6112fb6113af565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361136d5760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161136491906118f6565b60405180910390fd5b611376816114ce565b50565b6000828260405160200161138e9291906120d8565b6040516020818303038152906040528051906020012060001c905092915050565b6113b7611720565b73ffffffffffffffffffffffffffffffffffffffff166113d5610a71565b73ffffffffffffffffffffffffffffffffffffffff1614611434576113f8611720565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161142b91906118f6565b60405180910390fd5b565b6000611440611728565b90506002816000015403611480576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002816000018190555050565b6000611497611728565b90506001816000018190555050565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b60006114d86115a5565b905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b60007f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300905090565b6000806000859050600085905060008273ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611627573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164b919061213d565b60ff16905060008273ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561169d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c1919061213d565b60ff16905060006116d28a8a610aa9565b9050828260086116e29190611cf3565b6116ec9190611f47565b600a6116f89190611e5a565b81896117049190611ea5565b61170e9190611f16565b96508795505050505050935093915050565b600033905090565b60007f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061178082611755565b9050919050565b61179081611775565b811461179b57600080fd5b50565b6000813590506117ad81611787565b92915050565b600080604083850312156117ca576117c9611750565b5b60006117d88582860161179e565b92505060206117e98582860161179e565b9150509250929050565b6000819050919050565b611806816117f3565b82525050565b600060208201905061182160008301846117fd565b92915050565b611830816117f3565b811461183b57600080fd5b50565b60008135905061184d81611827565b92915050565b6000806000806080858703121561186d5761186c611750565b5b600061187b8782880161179e565b945050602061188c8782880161179e565b935050604061189d8782880161183e565b92505060606118ae8782880161183e565b91505092959194509250565b6000602082840312156118d0576118cf611750565b5b60006118de8482850161183e565b91505092915050565b6118f081611775565b82525050565b600060208201905061190b60008301846118e7565b92915050565b6000806000806080858703121561192b5761192a611750565b5b60006119398782880161179e565b945050602061194a8782880161179e565b935050604061195b8782880161179e565b925050606061196c8782880161183e565b91505092959194509250565b60006020828403121561198e5761198d611750565b5b600061199c8482850161179e565b91505092915050565b600082825260208201905092915050565b50565b60006119c66000836119a5565b91506119d1826119b6565b600082019050919050565b600060208201905081810360008301526119f5816119b9565b9050919050565b6000608082019050611a1160008301876118e7565b611a1e60208301866118e7565b611a2b60408301856117fd565b611a3860608301846117fd565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4d7573742062652063726561746f720000000000000000000000000000000000600082015250565b6000611aa6600f836119a5565b9150611ab182611a70565b602082019050919050565b60006020820190508181036000830152611ad581611a99565b9050919050565b6000606082019050611af160008301866118e7565b611afe60208301856118e7565b611b0b60408301846117fd565b949350505050565b60008115159050919050565b611b2881611b13565b8114611b3357600080fd5b50565b600081519050611b4581611b1f565b92915050565b600060208284031215611b6157611b60611750565b5b6000611b6f84828501611b36565b91505092915050565b7f506172616d732077726f6e670000000000000000000000000000000000000000600082015250565b6000611bae600c836119a5565b9150611bb982611b78565b602082019050919050565b60006020820190508181036000830152611bdd81611ba1565b9050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b6000819050919050565b6000611c27611c22611c1d84611be4565b611c02565b611bee565b9050919050565b611c3781611c0c565b82525050565b6000602082019050611c526000830184611c2e565b92915050565b7f43616e6e6f7420617070726f7665000000000000000000000000000000000000600082015250565b6000611c8e600e836119a5565b9150611c9982611c58565b602082019050919050565b60006020820190508181036000830152611cbd81611c81565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611cfe826117f3565b9150611d09836117f3565b9250828201905080821115611d2157611d20611cc4565b5b92915050565b60008160011c9050919050565b6000808291508390505b6001851115611d7e57808604811115611d5a57611d59611cc4565b5b6001851615611d695780820291505b8081029050611d7785611d27565b9450611d3e565b94509492505050565b600082611d975760019050611e53565b81611da55760009050611e53565b8160018114611dbb5760028114611dc557611df4565b6001915050611e53565b60ff841115611dd757611dd6611cc4565b5b8360020a915084821115611dee57611ded611cc4565b5b50611e53565b5060208310610133831016604e8410600b8410161715611e295782820a905083811115611e2457611e23611cc4565b5b611e53565b611e368484846001611d34565b92509050818404811115611e4d57611e4c611cc4565b5b81810290505b9392505050565b6000611e65826117f3565b9150611e70836117f3565b9250611e9d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484611d87565b905092915050565b6000611eb0826117f3565b9150611ebb836117f3565b9250828202611ec9816117f3565b91508282048414831517611ee057611edf611cc4565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611f21826117f3565b9150611f2c836117f3565b925082611f3c57611f3b611ee7565b5b828204905092915050565b6000611f52826117f3565b9150611f5d836117f3565b9250828203905081811115611f7557611f74611cc4565b5b92915050565b7f546f6b656e206e6f7420737570706f7274000000000000000000000000000000600082015250565b6000611fb16011836119a5565b9150611fbc82611f7b565b602082019050919050565b60006020820190508181036000830152611fe081611fa4565b9050919050565b6000611ff2826117f3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361202457612023611cc4565b5b600182019050919050565b600060c08201905061204460008301896117fd565b61205160208301886118e7565b61205e60408301876118e7565b61206b60608301866118e7565b61207860808301856118e7565b61208560a08301846117fd565b979650505050505050565b60008160601b9050919050565b60006120a882612090565b9050919050565b60006120ba8261209d565b9050919050565b6120d26120cd82611775565b6120af565b82525050565b60006120e482856120c1565b6014820191506120f482846120c1565b6014820191508190509392505050565b600060ff82169050919050565b61211a81612104565b811461212557600080fd5b50565b60008151905061213781612111565b92915050565b60006020828403121561215357612152611750565b5b600061216184828501612128565b9150509291505056fea2646970667358221220cf0eb89945cf614b7a19e3650e9ebc5ac3c9407cc168109836956277f0abfca464736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063485cc9551161008c578063baaa61be11610066578063baaa61be146101d8578063d7d1bbdb14610208578063ed71262a14610224578063f2fde38b14610240576100cf565b8063485cc95514610194578063715018a6146101b05780638da5cb5b146101ba576100cf565b806302cd5bef146100d45780632b5d97a2146101045780632d7788db146101205780632e0f26251461013c5780633015394c1461015a5780633b19e84a14610176575b600080fd5b6100ee60048036038101906100e991906117b3565b61025c565b6040516100fb919061180c565b60405180910390f35b61011e60048036038101906101199190611853565b610288565b005b61013a600480360381019061013591906118ba565b610355565b005b61014461058a565b604051610151919061180c565b60405180910390f35b610174600480360381019061016f91906118ba565b61058f565b005b61017e6107c4565b60405161018b91906118f6565b60405180910390f35b6101ae60048036038101906101a991906117b3565b6107ed565b005b6101b8610a5d565b005b6101c2610a71565b6040516101cf91906118f6565b60405180910390f35b6101f260048036038101906101ed91906117b3565b610aa9565b6040516101ff919061180c565b60405180910390f35b610222600480360381019061021d91906118ba565b610ad5565b005b61023e60048036038101906102399190611911565b610f85565b005b61025a60048036038101906102559190611978565b6112f3565b005b6000806102698484611379565b9050600460008281526020019081526020016000205491505092915050565b6102906113af565b600082036102d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ca906119dc565b60405180910390fd5b60006102df8585611379565b90508260036000838152602001908152602001600020819055508160046000838152602001908152602001600020819055507faadb66a62dcb0cfd19fd29bbabd96cdbf736d61afa8691cd09a6a3764507aed38585858560405161034694939291906119fc565b60405180910390a15050505050565b61035d611436565b60006002600083815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480156104085750600060038111156103e2576103e1611a41565b5b8160060160009054906101000a900460ff16600381111561040657610405611a41565b5b145b610447576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043e90611abc565b60405180910390fd5b60028160060160006101000a81548160ff0219169083600381111561046f5761046e611a41565b5b021790555060008160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166323b872dd308460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685600501546040518463ffffffff1660e01b815260040161050293929190611adc565b6020604051808303816000875af1158015610521573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105459190611b4b565b507f1fdac08e93f72ff55b24ebdf4152b7f56b98982fe9249639c1010cc52aebccd683604051610575919061180c565b60405180910390a1505061058761148d565b50565b600881565b610597611436565b60006002600083815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614801561064257506000600381111561061c5761061b611a41565b5b8160060160009054906101000a900460ff1660038111156106405761063f611a41565b5b145b610681576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067890611abc565b60405180910390fd5b60038160060160006101000a81548160ff021916908360038111156106a9576106a8611a41565b5b021790555060008160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166323b872dd308460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685600501546040518463ffffffff1660e01b815260040161073c93929190611adc565b6020604051808303816000875af115801561075b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077f9190611b4b565b507fee243f878b7fc2f54e934ca33783d4395d42bc07612e2bd4b8e0e178639f7a28836040516107af919061180c565b60405180910390a150506107c161148d565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006107f76114a6565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff161480156108455750825b9050600060018367ffffffffffffffff1614801561087a575060003073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015610888575080155b156108bf576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550831561090f5760018560000160086101000a81548160ff0219169083151502179055505b600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16141580156109795750600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614155b6109b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109af90611bc4565b60405180910390fd5b856000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508315610a545760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d26001604051610a4b9190611c3d565b60405180910390a15b50505050505050565b610a656113af565b610a6f60006114ce565b565b600080610a7c6115a5565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b600080610ab68484611379565b9050600360008281526020019081526020016000205491505092915050565b610add611436565b600060026000838152602001908152602001600020905060006003811115610b0857610b07611a41565b5b8160060160009054906101000a900460ff166003811115610b2c57610b2b611a41565b5b148015610b8857508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610bc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bbe90611ca4565b60405180910390fd5b60008160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000610c6d8460020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168560030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661025c565b9050600060026008610c7f9190611cf3565b600a610c8b9190611e5a565b828660040154610c9b9190611ea5565b610ca59190611f16565b9050600060026008610cb79190611cf3565b600a610cc39190611e5a565b838760050154610cd39190611ea5565b610cdd9190611f16565b90508473ffffffffffffffffffffffffffffffffffffffff166323b872dd308860010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16848a60050154610d319190611f47565b6040518463ffffffff1660e01b8152600401610d4f93929190611adc565b6020604051808303816000875af1158015610d6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d929190611b4b565b508373ffffffffffffffffffffffffffffffffffffffff166323b872dd8760010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1630856040518463ffffffff1660e01b8152600401610df493929190611adc565b6020604051808303816000875af1158015610e13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e379190611b4b565b508373ffffffffffffffffffffffffffffffffffffffff166323b872dd8760010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168860000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16858a60040154610eae9190611f47565b6040518463ffffffff1660e01b8152600401610ecc93929190611adc565b6020604051808303816000875af1158015610eeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0f9190611b4b565b5060018660060160006101000a81548160ff02191690836003811115610f3857610f37611a41565b5b02179055507fbecbbd7543b68baaaf7e9c3fd12e4719f1f506f4253abef4a6573d0adf3a73ed87604051610f6c919061180c565b60405180910390a1505050505050610f8261148d565b50565b610f8d611436565b6000610f998484610aa9565b03610fd9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd090611fc7565b60405180910390fd5b60008390508073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161101b93929190611adc565b6020604051808303816000875af115801561103a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105e9190611b4b565b506001600081548092919061107290611fe7565b91905055506000806110858686866115cd565b915091506040518060e001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020016000600381111561112457611123611a41565b5b81525060026000600154815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080820151816004015560a0820151816005015560c08201518160060160006101000a81548160ff0219169083600381111561129757611296611a41565b5b02179055509050507f0a40f07db67efcca64019d6cd2ef89bf3a05e93d3c418cc2fc489d90d15394a260015433898989896040516112da9695949392919061202f565b60405180910390a15050506112ed61148d565b50505050565b6112fb6113af565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361136d5760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161136491906118f6565b60405180910390fd5b611376816114ce565b50565b6000828260405160200161138e9291906120d8565b6040516020818303038152906040528051906020012060001c905092915050565b6113b7611720565b73ffffffffffffffffffffffffffffffffffffffff166113d5610a71565b73ffffffffffffffffffffffffffffffffffffffff1614611434576113f8611720565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161142b91906118f6565b60405180910390fd5b565b6000611440611728565b90506002816000015403611480576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002816000018190555050565b6000611497611728565b90506001816000018190555050565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b60006114d86115a5565b905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b60007f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300905090565b6000806000859050600085905060008273ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611627573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164b919061213d565b60ff16905060008273ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561169d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c1919061213d565b60ff16905060006116d28a8a610aa9565b9050828260086116e29190611cf3565b6116ec9190611f47565b600a6116f89190611e5a565b81896117049190611ea5565b61170e9190611f16565b96508795505050505050935093915050565b600033905090565b60007f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061178082611755565b9050919050565b61179081611775565b811461179b57600080fd5b50565b6000813590506117ad81611787565b92915050565b600080604083850312156117ca576117c9611750565b5b60006117d88582860161179e565b92505060206117e98582860161179e565b9150509250929050565b6000819050919050565b611806816117f3565b82525050565b600060208201905061182160008301846117fd565b92915050565b611830816117f3565b811461183b57600080fd5b50565b60008135905061184d81611827565b92915050565b6000806000806080858703121561186d5761186c611750565b5b600061187b8782880161179e565b945050602061188c8782880161179e565b935050604061189d8782880161183e565b92505060606118ae8782880161183e565b91505092959194509250565b6000602082840312156118d0576118cf611750565b5b60006118de8482850161183e565b91505092915050565b6118f081611775565b82525050565b600060208201905061190b60008301846118e7565b92915050565b6000806000806080858703121561192b5761192a611750565b5b60006119398782880161179e565b945050602061194a8782880161179e565b935050604061195b8782880161179e565b925050606061196c8782880161183e565b91505092959194509250565b60006020828403121561198e5761198d611750565b5b600061199c8482850161179e565b91505092915050565b600082825260208201905092915050565b50565b60006119c66000836119a5565b91506119d1826119b6565b600082019050919050565b600060208201905081810360008301526119f5816119b9565b9050919050565b6000608082019050611a1160008301876118e7565b611a1e60208301866118e7565b611a2b60408301856117fd565b611a3860608301846117fd565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4d7573742062652063726561746f720000000000000000000000000000000000600082015250565b6000611aa6600f836119a5565b9150611ab182611a70565b602082019050919050565b60006020820190508181036000830152611ad581611a99565b9050919050565b6000606082019050611af160008301866118e7565b611afe60208301856118e7565b611b0b60408301846117fd565b949350505050565b60008115159050919050565b611b2881611b13565b8114611b3357600080fd5b50565b600081519050611b4581611b1f565b92915050565b600060208284031215611b6157611b60611750565b5b6000611b6f84828501611b36565b91505092915050565b7f506172616d732077726f6e670000000000000000000000000000000000000000600082015250565b6000611bae600c836119a5565b9150611bb982611b78565b602082019050919050565b60006020820190508181036000830152611bdd81611ba1565b9050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b6000819050919050565b6000611c27611c22611c1d84611be4565b611c02565b611bee565b9050919050565b611c3781611c0c565b82525050565b6000602082019050611c526000830184611c2e565b92915050565b7f43616e6e6f7420617070726f7665000000000000000000000000000000000000600082015250565b6000611c8e600e836119a5565b9150611c9982611c58565b602082019050919050565b60006020820190508181036000830152611cbd81611c81565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611cfe826117f3565b9150611d09836117f3565b9250828201905080821115611d2157611d20611cc4565b5b92915050565b60008160011c9050919050565b6000808291508390505b6001851115611d7e57808604811115611d5a57611d59611cc4565b5b6001851615611d695780820291505b8081029050611d7785611d27565b9450611d3e565b94509492505050565b600082611d975760019050611e53565b81611da55760009050611e53565b8160018114611dbb5760028114611dc557611df4565b6001915050611e53565b60ff841115611dd757611dd6611cc4565b5b8360020a915084821115611dee57611ded611cc4565b5b50611e53565b5060208310610133831016604e8410600b8410161715611e295782820a905083811115611e2457611e23611cc4565b5b611e53565b611e368484846001611d34565b92509050818404811115611e4d57611e4c611cc4565b5b81810290505b9392505050565b6000611e65826117f3565b9150611e70836117f3565b9250611e9d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484611d87565b905092915050565b6000611eb0826117f3565b9150611ebb836117f3565b9250828202611ec9816117f3565b91508282048414831517611ee057611edf611cc4565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611f21826117f3565b9150611f2c836117f3565b925082611f3c57611f3b611ee7565b5b828204905092915050565b6000611f52826117f3565b9150611f5d836117f3565b9250828203905081811115611f7557611f74611cc4565b5b92915050565b7f546f6b656e206e6f7420737570706f7274000000000000000000000000000000600082015250565b6000611fb16011836119a5565b9150611fbc82611f7b565b602082019050919050565b60006020820190508181036000830152611fe081611fa4565b9050919050565b6000611ff2826117f3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361202457612023611cc4565b5b600182019050919050565b600060c08201905061204460008301896117fd565b61205160208301886118e7565b61205e60408301876118e7565b61206b60608301866118e7565b61207860808301856118e7565b61208560a08301846117fd565b979650505050505050565b60008160601b9050919050565b60006120a882612090565b9050919050565b60006120ba8261209d565b9050919050565b6120d26120cd82611775565b6120af565b82525050565b60006120e482856120c1565b6014820191506120f482846120c1565b6014820191508190509392505050565b600060ff82169050919050565b61211a81612104565b811461212557600080fd5b50565b60008151905061213781612111565b92915050565b60006020828403121561215357612152611750565b5b600061216184828501612128565b9150509291505056fea2646970667358221220cf0eb89945cf614b7a19e3650e9ebc5ac3c9407cc168109836956277f0abfca464736f6c63430008180033",
  "devdoc": {
    "errors": {
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1441,
        "contract": "contracts/Swapper.sol:Swapper",
        "label": "treasury",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1443,
        "contract": "contracts/Swapper.sol:Swapper",
        "label": "requestCount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1448,
        "contract": "contracts/Swapper.sol:Swapper",
        "label": "requests",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Request)1434_storage)"
      },
      {
        "astId": 1452,
        "contract": "contracts/Swapper.sol:Swapper",
        "label": "exchangeRates",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1456,
        "contract": "contracts/Swapper.sol:Swapper",
        "label": "exchangeFees",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_enum(Status)1439": {
        "encoding": "inplace",
        "label": "enum Swapper.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(Request)1434_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Swapper.Request)",
        "numberOfBytes": "32",
        "value": "t_struct(Request)1434_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Request)1434_storage": {
        "encoding": "inplace",
        "label": "struct Swapper.Request",
        "members": [
          {
            "astId": 1420,
            "contract": "contracts/Swapper.sol:Swapper",
            "label": "fromAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1422,
            "contract": "contracts/Swapper.sol:Swapper",
            "label": "toAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1424,
            "contract": "contracts/Swapper.sol:Swapper",
            "label": "fromToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1426,
            "contract": "contracts/Swapper.sol:Swapper",
            "label": "toToken",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 1428,
            "contract": "contracts/Swapper.sol:Swapper",
            "label": "fromReceive",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1430,
            "contract": "contracts/Swapper.sol:Swapper",
            "label": "toReceive",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1433,
            "contract": "contracts/Swapper.sol:Swapper",
            "label": "status",
            "offset": 0,
            "slot": "6",
            "type": "t_enum(Status)1439"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}